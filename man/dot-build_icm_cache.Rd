% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/icm_cache.R
\name{.build_icm_cache}
\alias{.build_icm_cache}
\title{Build ICM Cache for Efficient Likelihood Computation}
\usage{
.build_icm_cache(t, kern_cfg, kp, L, eta, tau_B, cache = NULL)
}
\arguments{
\item{t}{Matrix of input locations}

\item{kern_cfg}{Kernel configuration list}

\item{kp}{Kernel parameters}

\item{L}{Lower triangular matrix for coregionalization}

\item{eta}{Vector of channel-specific noise parameters}

\item{tau_B}{Global scaling parameter}

\item{cache}{Existing cache object (optional, for updates)}
}
\value{
Updated cache object containing:
\item{Ux_x}{Eigenvectors from kernel eigendecomposition}
\item{lam_x}{Eigenvalues from kernel eigendecomposition}
\item{Bshape}{Coregionalization matrix (unit trace)}
\item{chol_list}{List of Cholesky factors for each eigenvalue block}
\item{logdet_sum}{Sum of log determinants for likelihood computation}
\item{key_kx}{Cache key for kernel eigendecomposition}
\item{key_B}{Cache key for coregionalization matrix}
}
\description{
Builds or updates a cache for efficient ICM likelihood computation using eigendecomposition
and block diagonal structure. The cache stores precomputed eigendecompositions and
Cholesky factors to avoid repeated computation during MCMC.
}
\details{
The function implements: \eqn{\Sigma_j = \tau_B \lambda_j B + D_\eta},
where \eqn{\lambda_j} are eigenvalues from kernel eigendecomposition, \eqn{B} is the coregionalization
matrix, and \eqn{D_\eta} contains channel-specific noise. The cache is updated only when
necessary based on parameter changes.
}
\examples{
# Build initial cache
cache <- .build_icm_cache(t, kern_cfg, kp, L, eta, tau_B)

# Update cache with new parameters
cache <- .build_icm_cache(t, kern_cfg, new_kp, L, eta, tau_B, cache)
}
