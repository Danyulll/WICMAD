// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fast_icm_loglik_curve_eigen
double fast_icm_loglik_curve_eigen(const Eigen::MatrixXd& yresid, const Eigen::MatrixXd& Uxx, const Rcpp::List& chollist, double logdetsum);
RcppExport SEXP _WICMAD_fast_icm_loglik_curve_eigen(SEXP yresidSEXP, SEXP UxxSEXP, SEXP chollistSEXP, SEXP logdetsumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type yresid(yresidSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Uxx(UxxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type chollist(chollistSEXP);
    Rcpp::traits::input_parameter< double >::type logdetsum(logdetsumSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_icm_loglik_curve_eigen(yresid, Uxx, chollist, logdetsum));
    return rcpp_result_gen;
END_RCPP
}
// fast_icm_loglik_curves_batch
Rcpp::NumericVector fast_icm_loglik_curves_batch(const Rcpp::List& curves, const Eigen::MatrixXd& Uxx, const Rcpp::List& chollist, double logdetsum);
RcppExport SEXP _WICMAD_fast_icm_loglik_curves_batch(SEXP curvesSEXP, SEXP UxxSEXP, SEXP chollistSEXP, SEXP logdetsumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type curves(curvesSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Uxx(UxxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type chollist(chollistSEXP);
    Rcpp::traits::input_parameter< double >::type logdetsum(logdetsumSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_icm_loglik_curves_batch(curves, Uxx, chollist, logdetsum));
    return rcpp_result_gen;
END_RCPP
}
// fast_wavelet_forward_1d
Rcpp::List fast_wavelet_forward_1d(const Rcpp::NumericVector& x, const std::string& wf, int J, const std::string& boundary);
RcppExport SEXP _WICMAD_fast_wavelet_forward_1d(SEXP xSEXP, SEXP wfSEXP, SEXP JSEXP, SEXP boundarySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type wf(wfSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type boundary(boundarySEXP);
    rcpp_result_gen = Rcpp::wrap(fast_wavelet_forward_1d(x, wf, J, boundary));
    return rcpp_result_gen;
END_RCPP
}
// fast_wavelet_inverse_1d
Rcpp::NumericVector fast_wavelet_inverse_1d(const Rcpp::NumericVector& coeff, const Rcpp::List& map);
RcppExport SEXP _WICMAD_fast_wavelet_inverse_1d(SEXP coeffSEXP, SEXP mapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type coeff(coeffSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type map(mapSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_wavelet_inverse_1d(coeff, map));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_WICMAD_fast_icm_loglik_curve_eigen", (DL_FUNC) &_WICMAD_fast_icm_loglik_curve_eigen, 4},
    {"_WICMAD_fast_icm_loglik_curves_batch", (DL_FUNC) &_WICMAD_fast_icm_loglik_curves_batch, 4},
    {"_WICMAD_fast_wavelet_forward_1d", (DL_FUNC) &_WICMAD_fast_wavelet_forward_1d, 4},
    {"_WICMAD_fast_wavelet_inverse_1d", (DL_FUNC) &_WICMAD_fast_wavelet_inverse_1d, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_WICMAD(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
